<#@ template  debug="true" language="C#" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ include file="TemplateFileManagerV2.1.ttinclude" #>
<#@ include file="brace.ttinclude" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="Model" #> 
<#@ import namespace="Shared.Utility" #> 
<#@ import namespace="Shared.Enum" #> 
<#@ import namespace="Shared.DataStructures" #> 
<#@ assembly name="$(ProjectDir)..\bin\Debug\Model.dll" #>
<#@ assembly name="$(ProjectDir)..\bin\Debug\Shared.dll" #>
<#@ import namespace="System.Reflection" #>
<#@ assembly name="EnvDte" #>
<#@ newAppDomain processor="tangibleT4Editor" #>


<#
// TODO remove INotifyPropertyChanged and IChangeTracking casts - should know this type information at generation so it is redundant
// TODO REFACTOR!
// Dictionary.AddIfNotContained()
// 

// NB: 
//	+ Only handles List<T> at the moment (no HashSets, Collections etc) 
//  + Only generic type tested is List<T>. List<T> is converted to ObservableCollection<T> by the template
// 	+ Assumes that reference types implement IEquatable (for Foo.Equals(Bar))
//	+ Assumes that reference types have parameterless constructors and are made into ObservableXXX objects (i.e. support INotifyPropertyChanged and IChangeTracking)
//  + Assumes c# type aliases are used (e.g. string, int, bool not Int32  etc)

	// required to output to multiple files
	manager = TemplateFileManager.Create(this);

	var ObservableType = typeof(IObservable);

	// Get a list of Types that implement IObservable
	var types = AppDomain.CurrentDomain.GetAssemblies().ToList().SelectMany(s => s.GetTypes()).Where(p => p != ObservableType && ObservableType.IsAssignableFrom(p));
	var typeNames  = types.Select(x => x.Name);

	foreach(var type in types)
	{
		PopulatePropertyCache(type,typeNames);
		CreateObservableObjectClass(type,typeNames);
	}

	// outfile to files
	manager.Process();
#>

<#+
	private TemplateFileManager manager;
	private const string _prefix = "Observable"; // change this to alter the output class names 
	private const string _namespaceName = "Model";
	
	private Dictionary<string,PropertyData> _propertyCache = new Dictionary<string,PropertyData>();
	
	// Cache property info so that each section of the document doesn't have to check for type properties
	private void PopulatePropertyCache(Type type, IEnumerable<string> typeNames)
	{
		var properties = GetPublicPropertyDetails(type);
		_propertyCache.Clear();

		foreach(var property in properties)
		{
			
			if (TypeUtility.IsTypeObservable(property.Value,typeNames))
			{
				// property type is in the list of types that implement IObservable
				var propertyInfo = new PropertyData(property.Value, PropertyType.Observable, string.Empty, string.Empty);
				_propertyCache.Add(property.Key, propertyInfo);
			}
			else
			{		
				var genericType = TypeUtility.GetGenericType(property.Value);

				if (genericType.Equals("List"))
                {
					var genericParameterType = TypeUtility.GetGenericTypeParameter(property.Value);

					if (TypeUtility.IsValueType(genericParameterType))
                    {
						// property is List<ValueType>
						var propertyInfo = new PropertyData(property.Value, PropertyType.ValueTypeList, genericType, genericParameterType);
						_propertyCache.Add(property.Key, propertyInfo);
                    }
					else
					{
						// property is List<IObservable> (assume that all reference types are IObservable for the moment)
						var propertyInfo = new PropertyData(property.Value, PropertyType.ObservableList, genericType, genericParameterType);
						_propertyCache.Add(property.Key, propertyInfo);
                    }
                }
				else
				{
					// property is a plain old value type (or string)
					var propertyInfo = new PropertyData(property.Value, PropertyType.ValueType, string.Empty, string.Empty);
					_propertyCache.Add(property.Key, propertyInfo);
				}
			}
		}
	}

	// Generate a new file for each IObservable type 
	private void CreateObservableObjectClass(Type type, IEnumerable<string> typeNames)
	{
		manager.StartNewFile(_prefix + type.Name + ".cs");
		CreateUsingStatements();
		var properties = GetPublicPropertyDetails(type);

		using(new Brace("namespace " + _namespaceName, this)){

				WriteLine("[Serializable]");		
				using(new Brace("public partial class " + _prefix + type.Name + " : INotifyPropertyChanged, IChangeTracking, ICloneable, IAttachEventHandler", this)){

						CreatePrivateMembers();

						CreateConstructor(type, properties, typeNames);

						CreateProperties(properties, typeNames);

						CreateResetPropertiesMethod(properties, typeNames);

						var observableProperties = properties.Where(x => TypeUtility.IsTypeObservable(x.Value,typeNames)).Select(x => x.Key);	
						CreatePropertyChangedMethods(observableProperties);

						CreateINotifyPropertyChangedRegion();

						CreateIChangeTrackingRegion(properties, typeNames);

						CreateCloneMethod(type.Name, properties,typeNames);

						CreateAttachEventHandlersMethod(_propertyCache);
				}
		 }
	}

	private void CreatePrivateMembers()
	{
		WriteLine("private Dictionary<string,bool> _changeTracker;");
		WriteLine("private bool _isTrackingEnabled;");
		WriteLine(Environment.NewLine);
	}

	private Dictionary<string, string> GetPublicPropertyDetails(Type type)
	{
		var properties = new Dictionary<string,string>();

		foreach (PropertyInfo property in type.GetProperties())
		{
			// removes any rubbish from the generic type name 
			var typeName = StringHelper.GetFriendlyName(property.PropertyType);
			properties.Add(property.Name,typeName);
		}

		return properties;
	}

	private void CreateUsingStatements()
	{
		WriteLine("using Shared.Utility;");
		WriteLine("using Shared.Interfaces;");
		WriteLine("using System;");
		WriteLine("using System.Linq;");
		WriteLine("using System.ComponentModel;");
		WriteLine("using System.Collections.Generic;");
		WriteLine("using System.Collections.ObjectModel;");
		WriteLine("using System.Collections.Specialized;");
		WriteLine("using System.Runtime.CompilerServices;");
		
		WriteLine(Environment.NewLine);
	}

	private void CreateConstructor(Type type, Dictionary<string,string> properties, IEnumerable<string> typeNames)
	{
		var camelCaseName = StringHelper.ToCamelCase(type.Name);

		// parameterless constructor, e.g. ObservableFoo()
		using(new Brace("public " + _prefix + type.Name + "()", this)){
			
			WriteLine("InitializeChangeTracker();");
			WriteLine("_isTrackingEnabled = false;");
			WriteLine(Environment.NewLine);
			foreach (var kvp in properties)
			{
				var isObservable = TypeUtility.IsTypeObservable(kvp.Value,typeNames);
				CreatePropertyInitializer(kvp.Key,kvp.Value, isObservable);
			}
			WriteLine("_isTrackingEnabled = true;");
		}
		WriteLine(Environment.NewLine);

		var collectionPropertyNames = new Dictionary<string,string>();
		var observablePropertyNames = new List<string>();

		// e.g.  ObservableFoo(Foo foo)
		using(new Brace("public " + _prefix + type.Name + "(" + type.Name + " " + camelCaseName + ") : this()", this)){

			WriteLine("_isTrackingEnabled = false;");
			WriteLine(Environment.NewLine);
			// Assign the OriginalX properties
			foreach (var kvp in properties)
			{
				var genericType = TypeUtility.ConvertTypeNameToObservableTypeName(kvp.Value,typeNames,_prefix);

				Write("Original" + kvp.Key + " = ");

				// if the type starts with 'Observable' we need to new up the object in the constructor, e.g OriginalX = new ObservableFoo();
				if (genericType.StartsWith(_prefix))
				{
					var genericParam = TypeUtility.GetGenericTypeParameter(kvp.Value);

					if (genericType.StartsWith("ObservableCollection"))
					{
						collectionPropertyNames.Add(kvp.Key, TypeUtility.ConvertTypeNameToObservableTypeName(genericParam,typeNames,_prefix));
					}
					else
					{
						observablePropertyNames.Add(kvp.Key);
					}

					//e.g. OriginalFoos = new ObservableCollection<ObservableFoo>(myObject.Foos.Select(x => new ObservableFoo(x)).ToList());

					var constructorParam = camelCaseName +  "." + kvp.Key;
					if (TypeUtility.IsTypeObservable(genericParam, typeNames))
					{
						genericParam = TypeUtility.ConvertTypeNameToObservableTypeName(genericParam,typeNames,_prefix);
						constructorParam = constructorParam + ".Select(x => new " + genericParam + "(x)).ToList()";
					}

					WriteLine("new " + genericType + "(" + constructorParam + ");");
				}
				else
				{
					WriteLine(camelCaseName +  "." + kvp.Key + ";");
				}
			}

			WriteLine(Environment.NewLine);
			WriteLine("// Set the properties to the Original property values");
			WriteLine("ResetProperties();");
			foreach(var prop in collectionPropertyNames)
			{
				WriteLine(prop.Key + ".CollectionChanged += " + prop.Key + "_CollectionChanged;");
			}


			//// This is now done inside of ResetProperties()
			//foreach(var prop in collectionPropertyNames)
			//{
			//	if (!TypeUtility.IsValueType(prop.Value))
			//	{
			//		using(new Brace("foreach(var item in " + prop.Key + ")",this))
			//		{
			//			WriteLine("var propertyChangedItem = item as INotifyPropertyChanged;");
			//			using(new Brace("if(propertyChangedItem != null)",this))
			//			{
			//				WriteLine("propertyChangedItem.PropertyChanged += " + prop.Key + "_Item_PropertyChanged;");
			//			}
			//		}
			//		WriteLine(Environment.NewLine);
			//	}
			//}

			foreach(var prop in observablePropertyNames)
			{
				WriteLine(prop + ".PropertyChanged += " + prop + "_PropertyChanged;");
			}

			WriteLine("ResetChangeTracking();");
			WriteLine("_isTrackingEnabled = true;");
		}
		
		WriteLine(Environment.NewLine);
		 
		// Create the collection changed and property changed event handlers
		foreach(var prop in collectionPropertyNames)
		{
			CreateCollectionChangedEventHandler(prop.Key);
			CreateCollectionItemChangedEventHandler(prop.Key);
		}
	}

	private void CreateCollectionChangedEventHandler(string propertyName)
	{
		using(new Brace("private void " + propertyName + "_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)",this))
		{
			WriteLine(Environment.NewLine);
			using(new Brace("switch(e.Action)",this))
			{
				WriteLine("case NotifyCollectionChangedAction.Remove:");
				WriteLine("case NotifyCollectionChangedAction.Replace:");
				PushIndent("\t");
				using(new Brace("foreach(var item in e.OldItems)",this))
				{
					WriteLine("var propertyChangedItem = item as INotifyPropertyChanged;");
					using(new Brace("if (propertyChangedItem != null)",this))
					{
						WriteLine("propertyChangedItem.PropertyChanged -= " + propertyName + "_Item_PropertyChanged;");
						WriteLine("// always treat a remove or replace on a reference type as a change");
						WriteLine(@"_changeTracker[""ProjectTimeItems""] = true;");
					}
					WriteLine("else");
					using(new Brace("",this))
					{
						WriteLine(@"_changeTracker[""" + propertyName + @"""] = !ListUtility.EqualTo(Original" + propertyName + "," + propertyName + ");");
					}
					WriteLine(@"OnPropertyChanged(""IsChanged"");");
				}

				WriteLine("break;");
				PopIndent();
				WriteLine("case NotifyCollectionChangedAction.Add:");
				PushIndent("\t");
				using(new Brace("foreach(var item in e.NewItems)",this))
				{
					WriteLine("var propertyChangedItem = item as INotifyPropertyChanged;");
					using(new Brace("if (propertyChangedItem != null)",this))
					{
						WriteLine("propertyChangedItem.PropertyChanged +=" + propertyName + "_Item_PropertyChanged;");
					}
				}
				WriteLine(@"_changeTracker[""" + propertyName + @"""] = !ListUtility.EqualTo(Original" + propertyName + "," + propertyName + ");");
				WriteLine(@"OnPropertyChanged(""IsChanged"");");
				WriteLine("break;");
				PopIndent();
			}
		}
		WriteLine(Environment.NewLine);
	}

	private void CreateCollectionItemChangedEventHandler(string propertyName)
	{
		using(new Brace("private void " + propertyName + "_Item_PropertyChanged(object sender, PropertyChangedEventArgs e)",this))
		{
			WriteLine("var trackingItem = sender as IChangeTracking;");
			using(new Brace("if (trackingItem != null)",this))
			{
				WriteLine(@"_changeTracker[""" + propertyName + @"""] = trackingItem.IsChanged;");
				WriteLine(@"OnPropertyChanged(""IsChanged"");");
			}
			WriteLine("else");
			using(new Brace("",this))
			{
				WriteLine(@"_changeTracker[""" + propertyName + @"""] = !ListUtility.EqualTo(Original" + propertyName + "," + propertyName + ");");
				WriteLine(@"OnPropertyChanged(""IsChanged"");");
			}
		}

		WriteLine(Environment.NewLine);
	}


	/// Used to initialize variables inside of the parameterless class constructor
	private void CreatePropertyInitializer(string propertyName, string propertyType, bool isTypeObservable)
	{
		Write(propertyName + " = ");
		
		switch(propertyType)
		{
			 
				case "int":
				case "short":
				case "byte":
				case "bool":
				case "long":
				case "float":
				case "double":
				case "decimal":
				case "string":
					WriteLine("default(" + propertyType + ");");
					break;
				default:
					
					// if type is nullable or a list then just set to null
					if (propertyType.EndsWith("?") || TypeUtility.GetGenericType(propertyType).Equals("List"))
					{
						WriteLine("null;");
					}
					else
					{
						WriteLine("new " + (isTypeObservable ? _prefix + propertyType : propertyType) + "();");
					}

					break;
		}
	}

	
	// Loop through all the public properties
	private void CreateProperties(Dictionary<string,string> properties, IEnumerable<string> typeNames)
	{
		foreach (var property in properties)
		{
			string type = TypeUtility.ConvertTypeNameToObservableTypeName(property.Value,typeNames,_prefix);
			CreateProperty(property.Key,type);
		}
	}

	// Create public property with propertychanged, can tracking etc
	private void CreateProperty(string propertyName, string propertyType)
	{
		var privateFieldName = "_" + StringHelper.ToCamelCase(propertyName);
		// private backing field
		WriteLine("private " + propertyType + " " + privateFieldName + ";");
		// original value field
		WriteLine("public " + propertyType + " Original" + propertyName + " { get; private set; }");

		// public property
		using(new Brace("public " + propertyType + " " + propertyName,this))
		{
				using(new Brace("get",this))
				{
					WriteLine("return " + privateFieldName + ";");
				}
				
				using(new Brace("set",this))
				{
					using(new Brace("if (" + privateFieldName + " != value)", this))
					{
						WriteLine(privateFieldName + " = value;");
						using(new Brace("if ((Original" + propertyName + " == null && value != null) || (Original" + propertyName + " != null && !Original" + propertyName + ".Equals(" + privateFieldName + ")))",this))
						{
							WriteLine(@"_changeTracker[""" + propertyName + @"""] = true;");
							WriteLine(@"OnPropertyChanged(""IsChanged"");");
						}
						using (new Brace("else", this))
						{
							WriteLine(@"_changeTracker[""" + propertyName + @"""] = false;");
						}
						WriteLine(@"OnPropertyChanged(""" + propertyName + @""");");
					}
				}
		}

		WriteLine(Environment.NewLine);
	}

	// Set public properties to have the same values as the Original properties ( and un-hook then hook-up propertychanged event handlers)
	private void CreateResetPropertiesMethod(Dictionary<string,string> properties, IEnumerable<string> typeNames)
	{

		using(new Brace("private void ResetProperties()",this))
		{
			
			foreach (var kvp in properties)
			{
				
				if (TypeUtility.IsValueType(kvp.Value))
				{
					WriteLine(kvp.Key + " = Original" + kvp.Key + ";");
					WriteLine(Environment.NewLine);
				}
				else
				{
					// Reference Types need to be deep copied
					var observableTypeName = TypeUtility.ConvertTypeNameToObservableTypeName(kvp.Value, typeNames, _prefix);

					// Unhook eventhandlers
					if (observableTypeName.StartsWith("Observable"))
					{
						var collectionIsValueType = TypeUtility.IsValueType(TypeUtility.GetGenericTypeParameter(observableTypeName));
						if (!collectionIsValueType)
						{
							WriteLine("// Unhook propertyChanged eventhandlers for " + kvp.Key);
							
							Write("if (" + kvp.Key + " != null) ");

							if(observableTypeName.StartsWith("ObservableCollection"))
							{
								WriteLine("ListUtility.AttachPropertyChangedEventHandlers(" + kvp.Key + "," + kvp.Key + "_Item_PropertyChanged, attach:false);");
							}
							else
							{
								WriteLine(kvp.Key + ".PropertyChanged -= " + kvp.Key + "_PropertyChanged;");
							}
						}
					}

					Write(kvp.Key + " = Original" + kvp.Key + " == null ? null : ");
					
					WriteLine("GenericCopier<" + observableTypeName + ">.DeepCopy(Original" + kvp.Key + ");" );

					// Hook up event handlers
					if (observableTypeName.StartsWith("Observable"))
					{
						var collectionIsValueType = TypeUtility.IsValueType(TypeUtility.GetGenericTypeParameter(observableTypeName));
						if (!collectionIsValueType)
						{
							WriteLine("// Hookup propertyChanged eventhandlers for " + kvp.Key);
							
							Write("if (" + kvp.Key + " != null) ");

							if(observableTypeName.StartsWith("ObservableCollection"))
							{
								WriteLine("ListUtility.AttachPropertyChangedEventHandlers(" + kvp.Key + "," + kvp.Key + "_Item_PropertyChanged, attach:true);");
							}
							else
							{
								WriteLine(kvp.Key + ".PropertyChanged += " + kvp.Key + "_PropertyChanged;");
							}
						}
					}
					WriteLine(Environment.NewLine);
				}
			}
		}
		WriteLine(Environment.NewLine);


	}

	// only for observable types at the moment (could be expanded to IChangeTracking or INotifyPropertyChanged properties)
	private void CreatePropertyChangedMethods(IEnumerable<string> propertyNames)
	{
		foreach(var propertyName in propertyNames)
		{
			using(new Brace("private void " + propertyName + "_PropertyChanged(object sender, PropertyChangedEventArgs e)",this))
			{
				using(new Brace(@"if (_changeTracker[""" + propertyName + @"""] != " + propertyName + ".IsChanged)",this))
				{
					WriteLine(@"_changeTracker[""" + propertyName + @"""] = " + propertyName + ".IsChanged;");
					WriteLine(@"OnPropertyChanged(""IsChanged"");");
				}
			}
		}

		WriteLine(Environment.NewLine);
	}

	private void CreateINotifyPropertyChangedRegion()
	{
		WriteLine(@"
#region INotifyPropertyChanged

[field:NonSerializedAttribute()]
public event PropertyChangedEventHandler PropertyChanged;

protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
{
	if (_isTrackingEnabled)
	{
		PropertyChangedEventHandler handler = PropertyChanged;
		if (handler != null) handler(this, new PropertyChangedEventArgs(propertyName));
	}
}

#endregion
");
	}

	private void CreateIChangeTrackingRegion(Dictionary<string,string> properties, IEnumerable<string> typeNames)
	{
		WriteLine(@"#region IChangeTracking" + Environment.NewLine);
		using(new Brace("public void AcceptChanges()",this))
		{
			foreach(var property in properties)
			{
				var camelCaseName = StringHelper.ToCamelCase(property.Key);

				// for ObservableCollections of Observable items we must AcceptChanges() for each of the items in the list	
				var observableType = TypeUtility.ConvertTypeNameToObservableTypeName(property.Value,typeNames, _prefix);
			
				if (observableType.StartsWith(_prefix))
				{
					if (observableType.StartsWith("ObservableCollection"))
					{
						if (TypeUtility.GetGenericTypeParameter(observableType).StartsWith(_prefix))
						{
							using(new Brace("foreach(var item in _" + camelCaseName + ")", this))
							{
								WriteLine("item.AcceptChanges();");
							}
						}
					}
					else
					{
						WriteLine("_" + camelCaseName + ".AcceptChanges();");
					}

					WriteLine("Original" + property.Key + " = GenericCopier<" + observableType + ">.DeepCopy(_" + camelCaseName + ");");
					WriteLine(Environment.NewLine);
				}
				else
				{
					// Value type - safe to assign
					WriteLine("Original" + property.Key + " = _" + camelCaseName + ";");
					WriteLine(Environment.NewLine);
				}
			}

			WriteLine("ResetChangeTracking();");
		}
	
		WriteLine(Environment.NewLine);

		using(new Brace("public void AbandonChanges()",this))
		{
			WriteLine("_isTrackingEnabled = false;");
			WriteLine("ResetProperties();");
			WriteLine("_isTrackingEnabled = true;");
			WriteLine("ResetChangeTracking();");
		}
	
		WriteLine(Environment.NewLine);

		using(new Brace("private void InitializeChangeTracker()", this))
		{
			WriteLine("_changeTracker = new Dictionary<string,bool>();");
			foreach(var property in properties)
			{
				WriteLine(@"_changeTracker[""" + property.Key + @"""] = false;");
			}
		}

		WriteLine(@"

private void ResetChangeTracking()
{
	foreach (string key in _changeTracker.Keys.ToList())
	{
		_changeTracker[key] = false;
	}
}

public bool IsChanged
{
	get 
	{ 
		return _changeTracker.Any(x => x.Value == true);
	}
	private set
	{
		throw new InvalidOperationException(""Cannot set IsChanged property"");
	}
}
		
#endregion

"
		);
	}

	private void CreateCloneMethod(string typeName, Dictionary<string,string> properties, IEnumerable<string> typeNames)
    {
		using(new Brace("public object Clone()", this))
        {

			WriteLine("var clone = new Observable" + typeName + "();");
			foreach (var kvp in properties)
			{
				// if value type or nullable value type (e.g. TimeSpan?)
				if (TypeUtility.IsValueType(kvp.Value) || (kvp.Value.EndsWith("?") && TypeUtility.IsValueType(kvp.Value.Replace("?",""))))
				{
					WriteLine("clone." + kvp.Key + " = " + kvp.Key + ";");
					WriteLine(Environment.NewLine);
				}
				else
				{
					// Reference Types need to be deep copied
					var observableTypeName = TypeUtility.ConvertTypeNameToObservableTypeName(kvp.Value, typeNames, _prefix);

					WriteLine("clone." + kvp.Key + " = new " + observableTypeName + "();");

					if (observableTypeName.StartsWith("ObservableCollection"))
                    {
						using(new Brace("foreach(var item in " + kvp.Key + ")", this))
						{
							if (TypeUtility.GetGenericTypeParameter(kvp.Key).StartsWith("Observable"))
							{
								WriteLine("clone." + kvp.Key + ".Add(item.Clone());");
							}
							else
							{
								// Value type list
								WriteLine("clone." + kvp.Key + ".Add(item);");
							}
						}
                    }

					WriteLine(Environment.NewLine);
				}
			}

			WriteLine("clone.AttachEventHandlers();");
			WriteLine("clone.AcceptChanges();");
			WriteLine("return clone;");
        }

		WriteLine(Environment.NewLine);
    }

	private void CreateAttachEventHandlersMethod(Dictionary<string,PropertyData> properties)
    {
		WriteLine("// This is only called after Clone() (so no need to unhook handlers). Need to refactor so that ResetProperties calls this");
		using(new Brace("public void AttachEventHandlers()", this))
        {
			foreach(var kvp in properties)
            {
				switch (kvp.Value.PropertyType)
                {
					case PropertyType.ValueType:
						// Do nothing
						break;
					case PropertyType.Observable:
						WriteLine(kvp.Key + ".PropertyChanged += " + kvp.Key + "_PropertyChanged;");
						WriteLine(kvp.Key + ".AttachEventHandlers();");
						break;
					case PropertyType.ValueTypeList:
						WriteLine(kvp.Key + ".CollectionChanged += " + kvp.Key + "_CollectionChanged;");
						break;
					case PropertyType.ObservableList:
						using (new Brace("foreach(var item in " + kvp.Key + ")",this))
                        {
							WriteLine("item.PropertyChanged += " + kvp.Key + "_Item_PropertyChanged;");
							WriteLine("item.AttachEventHandlers();");
                        }
						break;
                }
            }
        }
    }
#>